
# ! Note: Commented-out code is left intentionally for future reference and lookup.

x-django-api: &django-api
  build:
    context: ./backend
    dockerfile: Dockerfile
  restart: unless-stopped
  networks:
    - app-network
  depends_on:
    - postgres
    # - redis

services:

  # PostgreSQL database
  postgres:
    image: postgres:17.6-bookworm
    container_name: postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    # env_file: .env
    environment:
      POSTGRES_DB: arx_db
      POSTGRES_USER: arx_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - pgdata:/var/lib/postgresql/data/
    secrets:
      - db_password

  # Redis as message broker
  # redis:
  #   image: redis:8.2.1-alpine
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped

  # Django backend
  backend:
    <<: *django-api
    container_name: backend
    ports:
      - "8000"
    entrypoint: ["/app/entrypoint.sh"] # This is a script that runs database migrations
    volumes:
      - ./backend:/app/

  # Celery for tasks
  # celery:
  #   <<: *django-api
  #   container_name: celery
  #   command: celery -A app worker --loglevel=info
  #   volumes:
  #     - ./backend:/app/

  # React frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - VITE_API_URL=https://api
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_dist:/app/dist
    ports:
      - "8080:8080"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - frontend
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"

networks:
  app-network:
    driver: bridge

secrets:
  db_password:
    file: ./db_password.txt

volumes:
  pgdata:
  frontend_node_modules:
  frontend_dist:

# Mouting a volume ./frontend:/app overwrites everything in app, including /app/node_modules which causes werid issue caused by copied node_modules and package-lock.json
# By mounting a named volume at /app/node_modules we "protect" that folder from being overwritten in container by host
# Also .dockerignore requires those `node_modules` and `package-lock.json` to ensure they are not copied to the container but freshly installed
# Now, node_modules is built and used inside the container, with the correct Linux binaries
# Thanks to this solution code is hot-reloaded from host and dependencies are always correct for the container and nothing breaks