"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from dotenv import load_dotenv
from os import environ
from pathlib import Path
from datetime import timedelta

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['mk0x.com', 'www.mk0x.com', 'localhost', '127.0.0.1', 'backend']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework_simplejwt.token_blacklist',                             # https://django-rest-framework-simplejwt.readthedocs.io/en/latest/blacklist_app.html
    'corsheaders', # pip install django-cors-headers
    'rest_framework', # pip install djangorestframework
    'django_filters', # pip install django-filter
    'debug_toolbar', # pip install django-debug-toolbar
    'drf_spectacular', # pip install drf-spectacular                        # https://drf-spectacular.readthedocs.io/en/latest/readme.html
    'drf_spectacular_sidecar', # pip install drf-spectacular[sidecar]
    'accounts',
    'notes',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

INTERNAL_IPS = [
    '127.0.0.1',
]

FRONTEND_URL = 'http://127.0.0.1:8080' #'http://localhost:8080'

CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,
    'http://localhost:8080',
    'http://127.0.0.1:8080',
    'http://frontend:8080',
]

CSRF_TRUSTED_ORIGINS = [
    FRONTEND_URL,
    'http://localhost:8080',
    'http://127.0.0.1:8080',
    'http://frontend:8080',
]

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', #! Install `pip install psycopg2-binary` to talk to PostgreSQL. However in production compile psycopg2 from source
        'NAME': environ['DB_NAME'],
        'HOST': environ['HOST'],
        'PORT': int(environ['PORT']),
        'USER': environ['USER'],
        'PASSWORD': environ['PASSWORD'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'
AUTH_USER_KEY_MODEL = 'accounts.UserKey'

DEFAULT_ENCODING = 'utf-8'

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Notes App Django Backend Schema',
    'DESCRIPTION': 'Endpoints Schema for Python Django backend for note taking app.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}

ACCOUNT_ACTIVATION_TIME = 60*60*24 # One day in seconds - this setting defines how long user has to click a link in the verification email upon registerning


SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = False
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True

SESSION_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SAMESITE = 'None'

REFRESH_TOKEN_LIFETIME = timedelta(days=1)

SIMPLE_JWT = {
    # 'ALGORITHM': 'HS512',
    # 'SIGNING_KEY': environ['SIGNING_KEY'],
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': REFRESH_TOKEN_LIFETIME,
}

# Email related stuff:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = environ['EMAIL_HOST']
EMAIL_PORT = int(environ['EMAIL_PORT'])
EMAIL_HOST_USER = environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = environ['EMAIL_HOST_PASSWORD']

DEFAULT_FROM_EMAIL = environ['DEFAULT_FROM_EMAIL']
SERVER_EMAIL = environ['SERVER_EMAIL']


# Celery stuff:
# Here `1` means the name of the database - by convention should be 1
# Moreover if celery is redis docker and celery are run in the same environment localhost is appropriate
# For my case - since celery doesn't support Windows - runing celery in WSL then WSL address of default router is neccessary.
CELERY_BROKER_URL = environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/1')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'accounts.views': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
