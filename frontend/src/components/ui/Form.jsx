import React from 'react'
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext, useFormState } from "react-hook-form";

import { cn } from "@/lib/utils"

const Form = FormProvider

const FormFieldContext = React.createContext({}) // Create context provider

const FormField = ({ ...props } ) => { // Pass data from context to child components
  return (
    <FormFieldContext.Provider value={{ name: props.name }}> 
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext) // Read data from the context
  const itemContext = React.useContext(FormItemContext) // Get unique ID generated by the context
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name }) // Extract form state from fieldContext for this specific field
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

function FormItem({ className, ...props }) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div data-slot="form-item" className={cn("grid gap-2", className)} {...props} />
    </FormItemContext.Provider>
  );
}

function FormControl({ ...props }) {
  const { error, formItemId } = useFormField()

  return (
    <Slot data-slot="form-control" id={formItemId} aria-invalid={!!error} {...props} />
  );
}

function FormMessage({ className, ...props }) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p data-slot="form-message" id={formMessageId} className={cn("text-destructive text-sm", className)} {...props}>
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormControl,
  FormMessage,
  FormField,
}
