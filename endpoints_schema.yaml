openapi: 3.0.3
info:
  title: Notes App Django Backend Schema
  version: 1.0.0
  description: Endpoints Schema for Python Django backend for note taking app.
paths:
  /notes/notes/:
    post:
      operationId: notes_notes_create
      tags:
      - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notes'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Notes'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Notes'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notes'
          description: ''
  /notes/notes/{id}/:
    get:
      operationId: notes_notes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
    put:
      operationId: notes_notes_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotesDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotesDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotesDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
    patch:
      operationId: notes_notes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotesDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotesDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotesDetail'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
    delete:
      operationId: notes_notes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /notes/notes/{id}/change_encryption/:
    put:
      operationId: notes_notes_change_encryption_update
      description: |-
        Change encryption status of specific note.
        This endpoint requires encrypted symmetric keys for all users that have access to the note
        (as symmetric key is encrypted with each users' public key and storred in the NoteItem.
        Also encrypted note's body differs from unencrypted thus new body is mandatory to store along those keys).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotesDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotesDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotesDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
  /notes/notes/{id}/get_public_keys/:
    get:
      operationId: notes_notes_get_public_keys_retrieve
      description: List public keys of all users who have access to specific note
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
  /notes/notes/{id}/share/:
    get:
      operationId: notes_notes_share_retrieve
      description: |-
        GET: List users who have access to this note
        POST: Share note with another user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
    post:
      operationId: notes_notes_share_create
      description: |-
        GET: List users who have access to this note
        POST: Share note with another user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this note.
        required: true
      tags:
      - notes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotesDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotesDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotesDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
  /notes/notes/me/:
    get:
      operationId: notes_notes_me_retrieve
      description: Get all notes that current user has access to
      tags:
      - notes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesDetail'
          description: ''
  /users/activate/:
    post:
      operationId: users_activate_create
      description: Verify user's email using activation key
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserActivation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserActivation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserActivation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivation'
          description: ''
  /users/jwt/create/:
    post:
      operationId: users_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /users/jwt/expire/:
    post:
      operationId: users_jwt_expire_create
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /users/jwt/refresh/:
    post:
      operationId: users_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /users/keys/:
    post:
      operationId: users_keys_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserKey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserKey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserKey'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserKey'
          description: ''
  /users/keys/{id}/:
    get:
      operationId: users_keys_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user key.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserKey'
          description: ''
    delete:
      operationId: users_keys_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user key.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /users/keys/me/:
    get:
      operationId: users_keys_me_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserKey'
          description: ''
  /users/resend-email/:
    post:
      operationId: users_resend_email_create
      description: Resend email to user with new activation key
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendActivationEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendActivationEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendActivationEmail'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendActivationEmail'
          description: ''
  /users/users/:
    get:
      operationId: users_users_list
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCreate'
          description: ''
    post:
      operationId: users_users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /users/users/{id}/:
    get:
      operationId: users_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
    put:
      operationId: users_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
    patch:
      operationId: users_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserCreate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
    delete:
      operationId: users_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /users/users/change_password/:
    post:
      operationId: users_users_change_password_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /users/users/me/:
    get:
      operationId: users_users_me_retrieve
      description: |-
        GET: Displays info about specific user
        PUT: Chagnes data about specific user
        DELETE: Deletes specific user
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
    put:
      operationId: users_users_me_update
      description: |-
        GET: Displays info about specific user
        PUT: Chagnes data about specific user
        DELETE: Deletes specific user
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
    delete:
      operationId: users_users_me_destroy
      description: |-
        GET: Displays info about specific user
        PUT: Chagnes data about specific user
        DELETE: Deletes specific user
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    NoteItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        note:
          type: string
          format: uuid
        user_key:
          type: string
          format: uuid
        encryption_key:
          type: string
          writeOnly: true
        permission:
          $ref: '#/components/schemas/PermissionEnum'
      required:
      - encryption_key
      - id
      - note
      - user_key
    Notes:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        body:
          type: string
        owner:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        is_encrypted:
          type: boolean
        created_at:
          type: string
          format: date
          readOnly: true
        encryption_key:
          type: string
          writeOnly: true
        noteitem:
          type: array
          items:
            $ref: '#/components/schemas/NoteItem'
      required:
      - body
      - created_at
      - id
      - owner
      - title
    NotesDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        body:
          type: string
        is_encrypted:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date
          readOnly: true
        encryption_key:
          type: string
          writeOnly: true
        noteitem:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
      required:
      - body
      - created_at
      - id
      - is_encrypted
      - noteitem
      - title
    PatchedNotesDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        body:
          type: string
        is_encrypted:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date
          readOnly: true
        encryption_key:
          type: string
          writeOnly: true
        noteitem:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
    PatchedUserCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
    PermissionEnum:
      enum:
      - R
      - W
      - S
      - O
      type: string
      description: |-
        * `R` - Read
        * `W` - Write
        * `S` - Share
        * `O` - Owner
    ResendActivationEmail:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
      required:
      - email
      - username
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserActivation:
      type: object
      properties:
        activation_key:
          type: string
      required:
      - activation_key
    UserCreate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - email
      - id
      - password
      - username
    UserKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
          readOnly: true
        public_key:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - public_key
      - user
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
